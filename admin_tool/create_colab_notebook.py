#!/usr/bin/env python3
"""
Script ƒë·ªÉ t·∫°o Google Colab notebook ho√†n ch·ªânh
"""

import json

def create_colab_notebook():
    """T·∫°o notebook ho√†n ch·ªânh cho Google Colab"""
    
    notebook = {
        "nbformat": 4,
        "nbformat_minor": 0,
        "metadata": {
            "colab": {
                "provenance": [],
                "collapsed_sections": []
            },
            "kernelspec": {
                "name": "python3",
                "display_name": "Python 3"
            },
            "language_info": {
                "name": "python"
            }
        },
        "cells": [
            # Header cell
            {
                "cell_type": "markdown",
                "source": [
                    "# üìö SSG Epub Admin Tool - Google Colab\n\n",
                    "**C√¥ng c·ª• qu·∫£n l√Ω s√°ch ƒëi·ªán t·ª≠ cho SSG Epub Library**\n\n",
                    "## üöÄ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:\n",
                    "1. **Ch·∫°y t·ª´ng cell theo th·ª© t·ª±** (Ctrl+Enter ho·∫∑c Shift+Enter)\n",
                    "2. **L·∫ßn ƒë·∫ßu**: Nh·∫≠p th√¥ng tin khi ƒë∆∞·ª£c y√™u c·∫ßu\n",
                    "3. **L·∫ßn sau**: T·ª± ƒë·ªông l·∫•y t·ª´ Colab Secrets\n",
                    "4. **S·ª≠ d·ª•ng URL public** ƒë·ªÉ truy c·∫≠p admin tool\n\n",
                    "## üîë Setup Colab Secrets (khuy·∫øn ngh·ªã):\n",
                    "ƒê·ªÉ kh√¥ng ph·∫£i nh·∫≠p l·∫°i th√¥ng tin m·ªói l·∫ßn:\n",
                    "1. Click v√†o icon üîë **Secrets** ·ªü sidebar tr√°i\n",
                    "2. Th√™m c√°c secrets:\n",
                    "   - `GITHUB_REPO_URL`: https://github.com/username/SSGEpub.git\n",
                    "   - `GITHUB_TOKEN`: Personal Access Token t·ª´ GitHub\n",
                    "   - `GITHUB_USERNAME`: T√™n GitHub c·ªßa b·∫°n\n",
                    "   - `GITHUB_EMAIL`: Email GitHub c·ªßa b·∫°n\n",
                    "   - `NGROK_TOKEN`: Auth token t·ª´ ngrok.com (t√πy ch·ªçn)\n\n",
                    "---"
                ],
                "metadata": {"id": "header"}
            },
            
            # Step 1: Install packages
            {
                "cell_type": "markdown",
                "source": ["## üì¶ B∆∞·ªõc 1: C√†i ƒë·∫∑t packages"],
                "metadata": {"id": "step1"}
            },
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {"id": "install_packages"},
                "outputs": [],
                "source": [
                    "# C√†i ƒë·∫∑t c√°c package c·∫ßn thi·∫øt\n",
                    "!pip install streamlit requests PyYAML pyngrok -q\n\n",
                    "print(\"‚úÖ ƒê√£ c√†i ƒë·∫∑t xong c√°c packages!\")\n",
                    "print(\"üì¶ Packages: streamlit, requests, PyYAML, pyngrok\")"
                ]
            },
            
            # Step 2: Clone repository
            {
                "cell_type": "markdown",
                "source": ["## üìÇ B∆∞·ªõc 2: Clone repository"],
                "metadata": {"id": "step2"}
            },
            {
                "cell_type": "code",
                "source": [
                    "import os\n",
                    "from google.colab import userdata\n\n",
                    "# L·∫•y URL repository t·ª´ Colab Secrets ho·∫∑c nh·∫≠p th·ªß c√¥ng\n",
                    "try:\n",
                    "    REPO_URL = userdata.get('GITHUB_REPO_URL')\n",
                    "    print(f\"‚úÖ L·∫•y ƒë∆∞·ª£c repository URL t·ª´ secrets: {REPO_URL}\")\n",
                    "except:\n",
                    "    REPO_URL = input(\"Nh·∫≠p URL repository (v√≠ d·ª•: https://github.com/username/SSGEpub.git): \")\n\n",
                    "if REPO_URL:\n",
                    "    # X√≥a th∆∞ m·ª•c c≈© n·∫øu c√≥\n",
                    "    !rm -rf /content/SSGEpub\n",
                    "    \n",
                    "    # Clone repository\n",
                    "    !git clone {REPO_URL} /content/SSGEpub\n",
                    "    \n",
                    "    # Chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c repository\n",
                    "    %cd /content/SSGEpub\n",
                    "    \n",
                    "    print(\"‚úÖ ƒê√£ clone repository th√†nh c√¥ng!\")\n",
                    "    print(f\"üìÇ Repository: {REPO_URL}\")\n",
                    "    \n",
                    "    # Ki·ªÉm tra admin_tool c√≥ t·ªìn t·∫°i kh√¥ng\n",
                    "    if os.path.exists('/content/SSGEpub/admin_tool/main.py'):\n",
                    "        print(\"‚úÖ T√¨m th·∫•y admin_tool\")\n",
                    "    else:\n",
                    "        print(\"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y admin_tool, s·∫Ω t·∫°o m·ªõi\")\n",
                    "        # T·∫°o admin_tool n·∫øu ch∆∞a c√≥\n",
                    "        !mkdir -p admin_tool/data\n",
                    "        print(\"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c admin_tool\")\n",
                    "else:\n",
                    "    print(\"‚ùå Vui l√≤ng nh·∫≠p URL repository!\")\n",
                    "    print(\"üí° Tip: Th√™m GITHUB_REPO_URL v√†o Colab Secrets ƒë·ªÉ kh√¥ng ph·∫£i nh·∫≠p l·∫°i\")"
                ],
                "metadata": {"id": "clone_repo"},
                "execution_count": None,
                "outputs": []
            },
            
            # Step 3: Setup authentication
            {
                "cell_type": "markdown",
                "source": ["## üîë B∆∞·ªõc 3: C·∫•u h√¨nh authentication"],
                "metadata": {"id": "step3"}
            },
            {
                "cell_type": "code",
                "source": [
                    "from google.colab import userdata\n",
                    "import os\n\n",
                    "# L·∫•y th√¥ng tin t·ª´ Colab Secrets ho·∫∑c nh·∫≠p th·ªß c√¥ng\n",
                    "try:\n",
                    "    git_name = userdata.get('GITHUB_USERNAME')\n",
                    "    print(f\"‚úÖ L·∫•y ƒë∆∞·ª£c GitHub username t·ª´ secrets: {git_name}\")\n",
                    "except:\n",
                    "    git_name = input(\"Nh·∫≠p Git user name (m·∫∑c ƒë·ªãnh: Admin Bot): \") or \"Admin Bot\"\n\n",
                    "try:\n",
                    "    git_email = userdata.get('GITHUB_EMAIL')\n",
                    "    print(f\"‚úÖ L·∫•y ƒë∆∞·ª£c GitHub email t·ª´ secrets: {git_email}\")\n",
                    "except:\n",
                    "    git_email = input(\"Nh·∫≠p Git email (m·∫∑c ƒë·ªãnh: admin@ssgepub.com): \") or \"admin@ssgepub.com\"\n\n",
                    "# C·∫•u h√¨nh Git\n",
                    "!git config --global user.name \"{git_name}\"\n",
                    "!git config --global user.email \"{git_email}\"\n",
                    "!git config --global --add safe.directory /content/SSGEpub\n\n",
                    "print(f\"‚úÖ ƒê√£ c·∫•u h√¨nh Git: {git_name} <{git_email}>\")\n\n",
                    "# GitHub Token\n",
                    "try:\n",
                    "    github_token = userdata.get('GITHUB_TOKEN')\n",
                    "    os.environ['GITHUB_TOKEN'] = github_token\n",
                    "    print(\"‚úÖ L·∫•y ƒë∆∞·ª£c GitHub token t·ª´ secrets!\")\n",
                    "except:\n",
                    "    github_token = input(\"Nh·∫≠p GitHub Personal Access Token: \")\n",
                    "    if github_token:\n",
                    "        os.environ['GITHUB_TOKEN'] = github_token\n",
                    "        print(\"‚úÖ ƒê√£ l∆∞u GitHub token!\")\n",
                    "    else:\n",
                    "        print(\"‚ö†Ô∏è Kh√¥ng c√≥ GitHub token. B·∫°n c√≥ th·ªÉ c·∫•u h√¨nh sau trong admin tool.\")\n\n",
                    "print(\"\\nüí° Tip: ƒê·ªÉ kh√¥ng ph·∫£i nh·∫≠p l·∫°i, h√£y th√™m v√†o Colab Secrets:\")\n",
                    "print(\"   - GITHUB_TOKEN: Personal Access Token\")\n",
                    "print(\"   - GITHUB_USERNAME: T√™n GitHub c·ªßa b·∫°n\")\n",
                    "print(\"   - GITHUB_EMAIL: Email GitHub c·ªßa b·∫°n\")\n",
                    "print(\"   - NGROK_TOKEN: Auth token t·ª´ ngrok.com (t√πy ch·ªçn)\")"
                ],
                "metadata": {"id": "setup_auth"},
                "execution_count": None,
                "outputs": []
            },
            
            # Step 4: Setup ngrok
            {
                "cell_type": "markdown",
                "source": ["## üåê B∆∞·ªõc 4: Setup ngrok (ƒë·ªÉ t·∫°o URL public)"],
                "metadata": {"id": "step4"}
            },
            {
                "cell_type": "code",
                "source": [
                    "from pyngrok import ngrok\n",
                    "from google.colab import userdata\n\n",
                    "# L·∫•y ngrok token t·ª´ secrets ho·∫∑c nh·∫≠p th·ªß c√¥ng\n",
                    "try:\n",
                    "    ngrok_token = userdata.get('NGROK_TOKEN')\n",
                    "    ngrok.set_auth_token(ngrok_token)\n",
                    "    print(\"‚úÖ L·∫•y ƒë∆∞·ª£c ngrok token t·ª´ secrets!\")\n",
                    "except:\n",
                    "    ngrok_token = input(\"Nh·∫≠p ngrok auth token (l·∫•y t·ª´ https://dashboard.ngrok.com/get-started/your-authtoken): \")\n",
                    "    if ngrok_token:\n",
                    "        ngrok.set_auth_token(ngrok_token)\n",
                    "        print(\"‚úÖ ƒê√£ c·∫•u h√¨nh ngrok!\")\n",
                    "    else:\n",
                    "        print(\"‚ö†Ô∏è Kh√¥ng c√≥ ngrok token. Admin tool s·∫Ω ch·ªâ ch·∫°y local.\")\n\n",
                    "print(\"\\nüìù L∆∞u √Ω v·ªÅ ngrok:\")\n",
                    "print(\"üéØ Ngrok t·∫°o URL public ƒë·ªÉ truy c·∫≠p Streamlit app t·ª´ browser\")\n",
                    "print(\"üîó V√≠ d·ª•: https://abc123.ngrok.io -> localhost:8501 tr√™n Colab\")\n",
                    "print(\"‚ú® N·∫øu ch·∫°y local tr√™n m√°y b·∫°n th√¨ KH√îNG C·∫¶N ngrok!\")"
                ],
                "metadata": {"id": "setup_ngrok"},
                "execution_count": None,
                "outputs": []
            },
            
            # Step 5: Streamlit config
            {
                "cell_type": "markdown",
                "source": ["## üé® B∆∞·ªõc 5: C·∫•u h√¨nh Streamlit"],
                "metadata": {"id": "step5"}
            },
            {
                "cell_type": "code",
                "source": [
                    "# T·∫°o c·∫•u h√¨nh Streamlit\n",
                    "import os\n",
                    "from pathlib import Path\n\n",
                    "# T·∫°o th∆∞ m·ª•c .streamlit\n",
                    "streamlit_dir = Path.home() / \".streamlit\"\n",
                    "streamlit_dir.mkdir(exist_ok=True)\n\n",
                    "# T·∫°o file config.toml\n",
                    "config_content = \"\"\"\n",
                    "[server]\n",
                    "headless = true\n",
                    "port = 8501\n",
                    "enableCORS = false\n",
                    "enableXsrfProtection = false\n\n",
                    "[browser]\n",
                    "gatherUsageStats = false\n",
                    "\"\"\"\n\n",
                    "config_file = streamlit_dir / \"config.toml\"\n",
                    "with open(config_file, 'w') as f:\n",
                    "    f.write(config_content)\n\n",
                    "print(\"‚úÖ ƒê√£ c·∫•u h√¨nh Streamlit!\")"
                ],
                "metadata": {"id": "setup_streamlit"},
                "execution_count": None,
                "outputs": []
            },

            # Step 6: Create admin tool files
            {
                "cell_type": "markdown",
                "source": ["## üìù B∆∞·ªõc 6: T·∫°o Admin Tool Files (n·∫øu ch∆∞a c√≥)"],
                "metadata": {"id": "step6"}
            },
            {
                "cell_type": "code",
                "source": [
                    "# Ki·ªÉm tra v√† t·∫°o admin tool files n·∫øu c·∫ßn\n",
                    "import os\n",
                    "import json\n\n",
                    "def create_admin_tool_files():\n",
                    "    \"\"\"T·∫°o c√°c file c·∫ßn thi·∫øt cho admin tool\"\"\"\n",
                    "    \n",
                    "    # Ki·ªÉm tra xem c√≥ file main.py ch∆∞a\n",
                    "    if os.path.exists('admin_tool/main.py'):\n",
                    "        print(\"‚úÖ Admin tool files ƒë√£ t·ªìn t·∫°i\")\n",
                    "        return\n",
                    "    \n",
                    "    print(\"üìÅ T·∫°o admin tool files...\")\n",
                    "    \n",
                    "    # T·∫°o th∆∞ m·ª•c\n",
                    "    os.makedirs('admin_tool/data', exist_ok=True)\n",
                    "    \n",
                    "    # T·∫°o requirements.txt\n",
                    "    requirements = \"\"\"streamlit>=1.28.0\n",
                    "requests>=2.31.0\n",
                    "PyYAML>=6.0\n",
                    "pathlib>=1.0.1\n",
                    "unicodedata2>=15.0.0\"\"\"\n",
                    "    \n",
                    "    with open('admin_tool/requirements.txt', 'w') as f:\n",
                    "        f.write(requirements)\n",
                    "    print(\"‚úÖ T·∫°o requirements.txt\")\n",
                    "    \n",
                    "    # T·∫°o platforms.json\n",
                    "    platforms_data = {\n",
                    "        \"platforms\": [\n",
                    "            {\n",
                    "                \"id\": 1,\n",
                    "                \"name\": \"TinyURL\",\n",
                    "                \"logo_url\": \"https://tinyurl.com/app/themes/tinyurl/images/tinyurl-logo.svg\",\n",
                    "                \"api_endpoint\": \"https://tinyurl.com/api-create.php\",\n",
                    "                \"curl_template\": \"curl -X POST \\\"https://tinyurl.com/api-create.php\\\" -d \\\"url=${link_download}\\\"\",\n",
                    "                \"response_format\": \"text\",\n",
                    "                \"response_path\": \"\",\n",
                    "                \"active\": True,\n",
                    "                \"icon\": \"fas fa-link\"\n",
                    "            },\n",
                    "            {\n",
                    "                \"id\": 2,\n",
                    "                \"name\": \"Is.gd\",\n",
                    "                \"logo_url\": \"https://is.gd/images/logo.png\",\n",
                    "                \"api_endpoint\": \"https://is.gd/create.php\",\n",
                    "                \"curl_template\": \"curl -X POST \\\"https://is.gd/create.php\\\" -d \\\"format=simple&url=${link_download}\\\"\",\n",
                    "                \"response_format\": \"text\",\n",
                    "                \"response_path\": \"\",\n",
                    "                \"active\": True,\n",
                    "                \"icon\": \"fas fa-compress-alt\"\n",
                    "            }\n",
                    "        ],\n",
                    "        \"last_updated\": \"2024-01-01T00:00:00\"\n",
                    "    }\n",
                    "    \n",
                    "    with open('admin_tool/data/platforms.json', 'w', encoding='utf-8') as f:\n",
                    "        json.dump(platforms_data, f, indent=2, ensure_ascii=False)\n",
                    "    print(\"‚úÖ T·∫°o platforms.json\")\n",
                    "    \n",
                    "    print(\"‚úÖ ƒê√£ t·∫°o xong c√°c file c·∫ßn thi·∫øt!\")\n\n",
                    "# Ch·∫°y function\n",
                    "create_admin_tool_files()"
                ],
                "metadata": {"id": "create_files"},
                "execution_count": None,
                "outputs": []
            },

            # Step 7: Start admin tool
            {
                "cell_type": "markdown",
                "source": ["## üöÄ B∆∞·ªõc 7: Kh·ªüi ƒë·ªông Admin Tool"],
                "metadata": {"id": "step7"}
            },
            {
                "cell_type": "code",
                "source": [
                    "import subprocess\n",
                    "import threading\n",
                    "import time\n",
                    "from pyngrok import ngrok\n\n",
                    "# Ki·ªÉm tra admin tool c√≥ t·ªìn t·∫°i kh√¥ng\n",
                    "admin_tool_path = \"/content/SSGEpub/admin_tool/main.py\"\n\n",
                    "if not os.path.exists(admin_tool_path):\n",
                    "    print(f\"‚ùå Kh√¥ng t√¨m th·∫•y admin tool t·∫°i {admin_tool_path}\")\n",
                    "    print(\"üîÑ T·∫°o file main.py c∆° b·∫£n...\")\n",
                    "    \n",
                    "    # T·∫°o file main.py c∆° b·∫£n\n",
                    "    main_py_content = '''import streamlit as st\n\n",
                    "st.set_page_config(\n",
                    "    page_title=\"üìö SSG Epub Admin Tool\",\n",
                    "    page_icon=\"üìö\",\n",
                    "    layout=\"wide\"\n",
                    ")\n\n",
                    "st.markdown(\"\"\"\n",
                    "<div style=\"background: linear-gradient(90deg, #667eea 0%, #764ba2 100%); \n",
                    "            padding: 1rem; border-radius: 10px; color: white; text-align: center; margin-bottom: 2rem;\">\n",
                    "    <h1>üìö SSG Epub Admin Tool</h1>\n",
                    "    <p>C√¥ng c·ª• qu·∫£n l√Ω s√°ch ƒëi·ªán t·ª≠ cho SSG Epub Library</p>\n",
                    "</div>\n",
                    "\"\"\", unsafe_allow_html=True)\n\n",
                    "st.success(\"üéâ Admin Tool ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!\")\n",
                    "st.info(\"‚ö†Ô∏è ƒê√¢y l√† phi√™n b·∫£n c∆° b·∫£n. Vui l√≤ng upload c√°c file ƒë·∫ßy ƒë·ªß ƒë·ªÉ s·ª≠ d·ª•ng t·∫•t c·∫£ t√≠nh nƒÉng.\")\n\n",
                    "st.markdown(\"\"\"\n",
                    "## üìã T√≠nh nƒÉng s·∫Ω c√≥:\n",
                    "- ‚ûï **Th√™m s√°ch m·ªõi** v·ªõi t·ª± ƒë·ªông r√∫t g·ªçn link\n",
                    "- üîó **Qu·∫£n l√Ω platforms** r√∫t g·ªçn URL\n",
                    "- üîÑ **Convert h√†ng lo·∫°t** s√°ch c≈©\n",
                    "- üì§ **T·ª± ƒë·ªông Git operations**\n",
                    "- ‚öôÔ∏è **C√†i ƒë·∫∑t v√† qu·∫£n l√Ω**\n\n",
                    "## üîß ƒê·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß:\n",
                    "1. Upload c√°c file: `epub_manager.py`, `shortener_manager.py`, `git_manager.py`\n",
                    "2. Ho·∫∑c clone repository c√≥ ƒë·∫ßy ƒë·ªß files\n",
                    "3. Restart admin tool\n",
                    "\"\"\")\n",
                    "'''\n",
                    "    \n",
                    "    with open(admin_tool_path, 'w', encoding='utf-8') as f:\n",
                    "        f.write(main_py_content)\n",
                    "    \n",
                    "    print(\"‚úÖ ƒê√£ t·∫°o file main.py c∆° b·∫£n\")\n\n",
                    "print(\"üöÄ ƒêang kh·ªüi ƒë·ªông Admin Tool...\")\n\n",
                    "# T·∫°o ngrok tunnel\n",
                    "try:\n",
                    "    public_url = ngrok.connect(8501)\n",
                    "    print(f\"\\nüåê Admin Tool URL: {public_url}\")\n",
                    "    print(f\"üì± Truy c·∫≠p URL tr√™n ƒë·ªÉ s·ª≠ d·ª•ng admin tool\")\n",
                    "    print(f\"‚è∞ Tool s·∫Ω kh·ªüi ƒë·ªông trong v√†i gi√¢y...\\n\")\n",
                    "except Exception as e:\n",
                    "    print(f\"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o ngrok tunnel: {e}\")\n",
                    "    print(\"Admin tool s·∫Ω ch·∫°y tr√™n localhost:8501\")\n\n",
                    "# Kh·ªüi ƒë·ªông Streamlit\n",
                    "!streamlit run {admin_tool_path} --server.port 8501 --server.headless true"
                ],
                "metadata": {"id": "start_admin_tool"},
                "execution_count": None,
                "outputs": []
            }
        ]
    }
    
    return notebook

def main():
    """T·∫°o v√† l∆∞u notebook"""
    print("üìù T·∫°o Google Colab notebook...")
    
    notebook = create_colab_notebook()
    
    # L∆∞u notebook v·ªõi custom JSON encoder
    notebook_json = json.dumps(notebook, indent=2, ensure_ascii=False)
    # Replace None with null for proper JSON
    notebook_json = notebook_json.replace(': None,', ': null,')

    with open('SSG_Epub_Admin_Tool_Ready.ipynb', 'w', encoding='utf-8') as f:
        f.write(notebook_json)

    print("‚úÖ ƒê√£ t·∫°o notebook: SSG_Epub_Admin_Tool_Ready.ipynb")
    print("\nüöÄ C√°ch s·ª≠ d·ª•ng:")
    print("1. Upload file n√†y l√™n Google Colab")
    print("2. Ch·∫°y t·ª´ng cell theo th·ª© t·ª±")
    print("3. Truy c·∫≠p URL ƒë∆∞·ª£c t·∫°o b·ªüi ngrok")

if __name__ == "__main__":
    main()
